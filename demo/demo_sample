102375,How do I figure out the type of the SQL Server 2008 R2 View definition,"I was walking view definitions in a database today using sqlalchemy 0.6 (using get_view_definition()) and I ran across one that was larger than 4000 characters. MS seems to say (Information Schema Views for VIEWs) that shouldn't be returned. MS SQL Server Management Studio shows the whole thing (well at least the beginning and the end look right) if you ask for the design of the view. sqlalchemy returns a string truncated at 4000 characters (boo, hiss). How can I ask the database what type it wants to return for this piece of data instead of depending on what I suspect is out of date documentation. I'm assuming the type is probably varchar. I would just like to verify that.",[],True
257317,Django: Is there an in_ lookup for querying model objects like there is for SQLAlchemy queries?,"I'm trying to accomplish something like this: Or, is there a better way for me to get that set of objects?",['  userSelectionIDs = [pref.selectionID for pref in UserColumnSelectionPreference.objects.filter(user=reqUser).all()]\n  selections = ColumnSelections.objects.filter(id.in_(userSelectionIDs)).filter(type=2).all()\n'],True
343591,Python: interact with complex data warehouse,"We've worked hard to work up a full dimensional database model of our problem, and now it's time to start coding. Our previous projects have used hand-crafted queries constructed by string manipulation. Is there any best/standard practice for interfacing between python and a complex database layout? I've briefly evaluated SQLAlchemy, SQLObject, and Django-ORM, but (I may easily be missing something) they seem tuned for tiny web-type (OLTP) transactions, where I'm doing high-volume analytical (OLAP) transactions. Some of my requirements, that may be somewhat different than usual: load large amounts of data relatively quickly update/insert small amounts of data quickly and easily handle large numbers of rows easily (300 entries per minute over 5 years) allow for modifications in the schema, for future requirements Writing these queries is easy, but writing the code to get the data all lined up is tedious, especially as the schema evolves. This seems like something that a computer might be good at?",[],True
515384,"SQLAlchemy error - ""Please configure one or more attributes for these same-named columns explicitly.""","I am brand new to sqlalchemy. Trying to get a query to work and am having issues with a join. I have two tables both of which have a column named ""Id"" and I need to join on that table. My code looks like this: Implicitly combining column table1.Id with column table2.Id under attribute 'Id'. Please configure one or more attributes for these same-named columns explicitly. Question is, how do I configure these attributes? TIA!","['table1 = server.tab1\ntable2 = server.tab2\njoined = server.join(table1,table2, table1.Id == table2.Id)\nwhere = table1.createDate &gt; start\nresults = joined.filter(where).all()\n']",True
631593,Mysql - How do I identify and select only columns that are different when comparing two entries?,"My table is set up as follows: At the point in time when ID 9 is created/inserted, it will be the highest ID in the table. Upon inserting this entry, I want to find the most recent previous entry where the event matches the event for ID 9 (id 7 in this example). Then select/return only the column(s) where the values are different (in this example, both Value2 and Value3). I don't know which or how many values will be different ahead of time. Desired output: I'm using python/sqlalchemy and I'd like to know if I can do this sort of analysis efficiently using mysql alone for a table with thousands of entries.","['ID EVENT Value1 Value2 Value3 Value4 ... Value10\n1  400   2      2      2      2          2\n... \n7  500   3      6      5      5          1\n8  200   4      4      4      4          4\n9  500   3      7      6      5          1\n', 'ID EVENT Value2 Value3\n7  500   6      5\n9  500   7      6\n']",True
662322,"SQLAlchemy - Mapping a Class against Multiple Tables, one of which is read only","I have a foobar concept which is represented by the 'foobar' and 'foobar_data_cache' tables is the database and with the 'Foobar' class is python. The 'foobar' table represents some data about the concept and the 'foobar_data_cache' table represents some other data about the concept, data that derived from many other information in the database and that are computed by a database trigger. To keep consistency, INSERT, UPDATE and DELETE privileges are revoked from 'foobar_data_cache' table. With SQLAlchemy I want to map the 'Foobar' class to the two tables 'foobar' and 'foobar_data_cache' with a join. There is no reason to use another class to represent the data from 'foobar_data_cache' table and to build a relationship between those two classes because the data from both tables are strongly related. Indeed, from the database point of view, there is a one-to-one relationship between the two tables, guaranteed by: - the primary key of 'foobar_data_cache' beeing also a foreign key referencing the primary key of 'foobar' - and a trigger that checks that each row in 'foobar' has a corresponding row in 'foobar_data_cache' My problem is that when I try to persist a new Foobar object with SQLAlchemy ORM, it tries to insert some row for 'foobar_data_cache' table, which I would like to prevent. So, is it this possible to configure SQLAlchemy in a way that would consider 'foobar_data_cache' table as read-only? And if yes, how? Here is the code to explain my problem: Here is the SQL commands to create the two tables: Note: Some people might wonder why I split my data in two different tables considering the fact that it is a one-to-one relationship between them. The problem would be easily solve by using a single table and the FetchedValue construct (see How to persist only a subset of the mapped columns on SQLAlchemy?) on computed columns. Well, it is a bit complex but i will try to explain. First, the other things not explained above are: - I use PostgreSQL 8.4 which, among other things, cannot have deferrable UNIQUE constraints - none of my columns accept a NULL value - some columns in 'foobar_data_cache' have a unique constraint (not deferrable) - the trigger that computes the data in 'foobar_data_cache' is deferred until the end of the transaction. Indeed, it is because it takes information from others tables that can only be inserted after the insert on 'foobar', due to foreign key constraints. That said, in the case of using a single table, that means I would have to use a temporary dummy value for my computed columns because of the NOT-NULL constraints. My trigger would finally override it at the end of the transaction. And the problem is about concurency. Indeed, new transactions Tx trying to insert new 'foobar' while another transaction T1 is performing, would fail because the default dummy values for the unique columns already exists in the row corresponding to the performing transaction T1. I could generate random dummy values for columns having unique constraints but I don't like that style of doing things.","[""from sqlalchemy import (\n    Table,\n    Column,\n    Integer,\n    String,\n    ForeignKeyConstraint,\n    join,\n    create_engine,\n    )\nfrom sqlalchemy.orm import (\n    column_property,\n    sessionmaker,\n    )\nfrom sqlalchemy.schema import (\n    FetchedValue,\n    )\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\n_foobar_table = Table('foobar', Base.metadata,\n        Column('id', Integer, primary_key=True),\n        Column('some_data', String),\n    )\n\n_foobar_data_cache_table = Table('foobar_data_cache', Base.metadata,\n        Column('foobar_id', Integer, primary_key=True),\n        Column('computed_data', String, server_default=FetchedValue()),\n        ForeignKeyConstraint(['foobar_id'], ['foobar.id']),\n    )\n\nclass Foobar(Base):\n    __table__ = _foobar_table.join(_foobar_data_cache_table)\n    _id = column_property(_foobar_table.c.id, _foobar_data_cache_table.c.foobar_id)\n\n    def __init__(self, some_data):\n        self.some_data = some_data\n\nif __name__ == '__main__':\n    engine = create_engine('postgresql://tester@localhost:5432/mytestdb')\n    Session = sessionmaker(bind=engine)\n    session = Session()\n\n    my_foobar = Foobar('Dummy data')\n    session.add(my_foobar)\n    session.commit()\n"", 'CREATE TABLE foobar (\n  id int NOT NULL DEFAULT -2147483648,\n  some_data varchar NOT NULL,\n  CONSTRAINT pk_foobar PRIMARY KEY (id)\n);\n\nCREATE TABLE foobar_data_cache (\n  foobar_id int NOT NULL,\n  computed_data varchar NOT NULL,\n  CONSTRAINT pk_foobar_data_cache PRIMARY KEY (foobar_id),\n  CONSTRAINT fk_foobar_data_cache_foobar_1 FOREIGN KEY (foobar_id)\n    REFERENCES foobar (id) MATCH FULL\n    ON UPDATE CASCADE ON DELETE CASCADE\n);  \n']",True
819206,Selecting a column from a metadata-table in sqlalchemy,I am starting with sqlalchemy and so far I have What I am attempting is to just select the column that meets the where criterion. How can I achieve this?,"[""import sqlalchemy\n\ndb = sqlalchemy.create_engine('mysql://CONNECTION?charset=utf8&amp;use_unicode=0')\nconnection = db.connect()\ndb.echo = True\nmetadata = sqlalchemy.MetaData(db)\n\ndetails_file = sqlalchemy.Table('details_file', metadata, autoload=True)\n\nquery = details_file.select([details_file.c.Id]).\\\n        where(details_file.c.RunId == 5859)\nres = query.execute()\n"", 'Id']",True
852311,nose tests of Pylons app with models in init_model?,"I have a stock Pylons app created using with one controller and matched functional test, added using , and a SQLAlchemy table and mapped ORM class. The SQLAlchemy stuff is defined in the function rather than in module scope (and needs to be there). Running raises an exception because is somehow causing to be called twice within the same process, so it's trying to create a model that already exists. I can hackishly fix this by setting and checking a global variable inside , but (a) I'd rather not, and (b) third-party libraries such as AuthKit that dynamically define models break the tests as well, and can't be so easily changed. Is there a way to fix tests for Pylons, or should I write my own test script and just use , , and directly? Any working examples of this?","['paster create -t pylons', 'paster controller', 'init_model()', 'python setup.py test', 'nose', 'init_model()', 'init_model()', 'nose', 'unittest', 'loadapp', 'webtest']",True
861009,How do I ORDER BY an arithmetic express in SQLAlchemy?,How do I translate something like this into SQLAlchemy?,['SELECT (a * b) - (x + y) / z AS result\nFROM table\nORDER BY result\n'],True
1064564,sqlalchemy cursor error during yield_per,I am getting the following error: I am suspect that calling session.commit() is interfering with .yield_per Any idea?,"[""Traceback (most recent call last):\n    main()\n    for item in session.query(Item).yield_per(10):\n    fetch = cursor.fetchmany(self._yield_per)\n    self.cursor, self.context)\n    l = self.process_rows(self._fetchmany_impl(size))\n    row = self._fetchone_impl()\n    self.__buffer_rows()\n    self.__rowbuffer = collections.deque(self.cursor.fetchmany(size))\nsqlalchemy.exc.ProgrammingError: (ProgrammingError) named cursor isn't valid anymore None None\n"", 'sessionmaker_ = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nsession = scoped_session(sessionmaker_)\n\ndef foo(item):\n  # DO something to the item \n  session.add(item)\n  session.commit()\n\ndef main():\n  for item in session.query(Item).yield_per(5):\n    foo(item)\n']",True
1093060,What is the benefit of using psycopg2 with SQLAlchemy,"I understand that psycopg2 is more of a DB driver, and SQLAlchemy is an ORM. As the latest SQLAlchemy already supports postgreSQL dialect and connection pools, what are the benefits of using psycopg2 (postgresql+psycopg2) or its connection pool over SQLAlchemy's ?",[],True
1142991,SQLAlchemy relationships with Postgresql ARRAY,"Suppose we have a PostgreSQL database with two tables A, B. The column in table B contains a variable length array of ids from table A. In SQLAlchemy we have two classes that model those tables, say class A and B. The following works fine to get all the objects A that are referenced in an object B: How can we create a relationship in B referencing the objects A corresponding to the array? Tried column comparators using the above but it complains that is not a column in the model. Specifying the primaryjoin conditions as above doesn't seem to cut it either.","['\ntable A columns: id, name\ntable B columns: id, name, array_a\n', 'array_a', 'session.query(A).join(B, A.id == func.any(B.array_a)).filter(B.id == &lt;id&gt;).all()\n', 'func.any', 'ANY(array_a)']",True
1172326,How to query distinct on a joined column?,"This is the code, I would like to have UserCheckpoint.checkpoint to be distincts. Meaning all the UserCheckpoints queried should all have distinct Checkpoint objects. How can I do it? Thanks.",['friends_ucp = (db.session.query(UserCheckpoint).\n               join(UserCheckpoint.checkpoint).\n               filter(radius_cond).\n               filter(Checkpoint.demo == False).\n               filter(UserCheckpoint.user_id.in_(friends))\n               )\n'],True
1283117,"How to query a table, in sqlalchemy","I know how to query on a model now. Suppose there is a model: Now, I can do: But, now, I have a table (not a model) : How to query it as what I do with models? This will report an error: But: is OK. Is only work for models? How can I query on tables?","['Question', 'class Question(Base):\n    __tablename__ = ""questions""\n    id=Column(...)\n    user_id=Column(...)\n    ...\n', 'question = Session.query(Question).filter_by(user_id=123).one()\n', 'questions', ""questions = Table('questions', Base.metadata,\n                  Column(id, ...),\n                  Column(user_id, ...),\n                  ....)\n"", 'Session.query(questions).filter_by(user_id=123).one()\n', 'Traceback (most recent call last):\nFile ""&lt;console&gt;"", line 1, in &lt;module&gt;\nFile ""E:\\Python27\\lib\\site-packages\\sqlalchemy-0.6.3-py2.7.egg\\sqlalchemy\\orm\\query.py"", line 851, in filter_by\n  for key, value in kwargs.iteritems()]\nFile ""E:\\Python27\\lib\\site-packages\\sqlalchemy-0.6.3-py2.7.egg\\sqlalchemy\\orm\\util.py"", line 567, in _entity_descriptor\n    desc = entity.class_manager[key]\nAttributeError: \'NoneType\' object has no attribute \'class_manager\'\n', 'Session.query(questions).all()\n', 'filter_by']",True
1441191,I am having an issue populating my tables for my pyramid project,"So I recently changed from sqlite to postgres so that I could push my site to heroku. The issue I am having is that the tables are now getting built out of order?? The issue I am having is that sqlalchemy/pyramid or whatever the populate script generated by python setup.py develop on one of these types of projects, is trying to create the table Page before the table Data. Since there are foreign keys in Page that depend on Table, this is failing. I can't find any mention of this issue in the documentation, any insight would be greatly appreciated. -Sam","[""class Data(Base):\n    __tablename__ = 'data'\n    id = Column(Integer, autoincrement=True, primary_key=True)\n    data_type = Column(Integer, primary_key=True, unique=True)\n    value = Column(Text, primary_key=True, unique=True)\n    range_lower = Column(Integer)\n    range_upper = Column(Integer)\n    gold = Column(Boolean)\n\n    def __init__(self, data_type, value, range_lower=0, range_upper=0, gold=False):\n        self.data_type = data_type\n        self.value = value\n        self.range_lower = range_lower\n        self.range_upper = range_upper\n        self.gold = gold\n\n\n\n\nclass Page(Base):\n    __tablename__ = 'page'\n    id = Column(Integer, autoincrement=True, primary_key=True)\n    data_type = Column(Integer, ForeignKey('data.data_type'))\n    description = Column(Text)\n    annotations_per_page = Column(Integer)\n    uses_gold = Column(Boolean)\n\n    def __init__(self, data_type, description='default description', annotations_per_page=1, uses_gold=False):\n        self.data_type = data_type\n        self.description = description\n        self.annotations_per_page = annotations_per_page\n        self.uses_gold = uses_gold\n""]",True
1515617,Association Proxy SQLAlchemy,"The following details how to use association proxies to use values of an ORM object to create views and create objects by said values. http://docs.sqlalchemy.org/en/latest/orm/extensions/associationproxy.html#creation-of-new-values However, when I append an value that matches an existing object in the database (and said value is either unique or a primary key), it creates a conflicting object so I cannot commit. So in my case is this only useful as a view, and I'll need to use ORM queries to retrieve the object to be appended. Is this my only option or can I use merge (I may only be able to do this if it's a primary key and not a unique constraint), OR set up the constructor such that it will use an existing object in the database if it exists instead of creating a new object? For example from the docs: I suppose this may not even be a good idea, but it could be in certain use cases :)","[""user.keywords.append('cheese inspector')\n\n# Is translated by the association proxy into the operation:\n\nuser.kw.append(Keyword('cheese inspector'))\n\n# But I'd like to to be translated to something more like (of course the query could fail).\n\nkeyword = session.query(Keyword).filter(Keyword.keyword == 'cheese inspector').one()\nuser.kw.append(keyword)\n\n# OR ideally\n\nuser.kw.append(Keyword('cheese inspector'))\nsession.merge() # retrieves identical object from the database, or keeps new one\nsession.commit() # success!\n""]",True
1648958,SQLAlchemy error on left join,I am new to SQLAlchemy and I am trying to achieve this SQL: I come up with this statement: The generated SQL looks like: But it also throws this error (from iPython): I just don't understand what is the error while the generated SQL is good. Thank you.,"[""SELECT \n    node.*,\n    alarms.*\nFROM\n    node\n        LEFT JOIN\n            alarms ON alarms.nodeid = node.nodeid \nWHERE\n    node.foreignid IN ('foreignid_1','foreignid_2','foreignid_3') \nORDER BY node.nodeid;\n"", ""stmt = session.query(Node, Alarms).outerjoin(Alarms, Alarms.nodeid == Node.nodeid).filter(Node.foreignid.in_(['foreignid_1','foreignid_2','foreignid_3'])).order_by(asc(Node.nodeid))\nresults = stmt.all()\n"", ""SELECT \n    node.nodeid AS node_nodeid,\n    node.dpname AS node_dpname,\n    node.nodecreatetime AS node_nodecreatetime,\n    node.nodeparentid AS node_nodeparentid,\n    node.nodetype AS node_nodetype,\n    node.nodesysoid AS node_nodesysoid,\n    node.nodesysname AS node_nodesysname,\n    node.nodesysdescription AS node_nodesysdescription,\n    node.nodesyslocation AS node_nodesyslocation,\n    node.nodesyscontact AS node_nodesyscontact,\n    node.nodelabel AS node_nodelabel,\n    node.nodelabelsource AS node_nodelabelsource,\n    node.nodenetbiosname AS node_nodenetbiosname,\n    node.nodedomainname AS node_nodedomainname,\n    node.operatingsystem AS node_operatingsystem,\n    node.lastcapsdpoll AS node_lastcapsdpoll,\n    node.foreignsource AS node_foreignsource,\n    node.foreignid AS node_foreignid,\n    alarms.alarmid AS alarms_alarmid,\n    alarms.eventuei AS alarms_eventuei,\n    alarms.dpname AS alarms_dpname,\n    alarms.nodeid AS alarms_nodeid,\n    alarms.ipaddr AS alarms_ipaddr,\n    alarms.serviceid AS alarms_serviceid,\n    alarms.reductionkey AS alarms_reductionkey,\n    alarms.alarmtype AS alarms_alarmtype,\n    alarms.counter AS alarms_counter,\n    alarms.severity AS alarms_severity,\n    alarms.lasteventid AS alarms_lasteventid,\n    alarms.firsteventtime AS alarms_firsteventtime,\n    alarms.lasteventtime AS alarms_lasteventtime,\n    alarms.firstautomationtime AS alarms_firstautomationtime,\n    alarms.lastautomationtime AS alarms_lastautomationtime,\n    alarms.description AS alarms_description,\n    alarms.logmsg AS alarms_logmsg,\n    alarms.operinstruct AS alarms_operinstruct,\n    alarms.tticketid AS alarms_tticketid,\n    alarms.tticketstate AS alarms_tticketstate,\n    alarms.mouseovertext AS alarms_mouseovertext,\n    alarms.suppresseduntil AS alarms_suppresseduntil,\n    alarms.suppresseduser AS alarms_suppresseduser,\n    alarms.suppressedtime AS alarms_suppressedtime,\n    alarms.alarmackuser AS alarms_alarmackuser,\n    alarms.alarmacktime AS alarms_alarmacktime,\n    alarms.managedobjectinstance AS alarms_managedobjectinstance,\n    alarms.managedobjecttype AS alarms_managedobjecttype,\n    alarms.applicationdn AS alarms_applicationdn,\n    alarms.ossprimarykey AS alarms_ossprimarykey,\n    alarms.x733alarmtype AS alarms_x733alarmtype,\n    alarms.x733probablecause AS alarms_x733probablecause,\n    alarms.qosalarmstate AS alarms_qosalarmstate,\n    alarms.clearkey AS alarms_clearkey,\n    alarms.ifindex AS alarms_ifindex,\n    alarms.eventparms AS alarms_eventparms\nFROM\n    node\n        LEFT OUTER JOIN\n            alarms ON alarms.nodeid = node.nodeid\nWHERE\n    node.foreignid IN ('foreignid_2' , 'foreignid_1', 'foreignid_3')\nORDER BY node.nodeid ASC  \n"", 'In [86]: stmt = session.query(Node, Alarms).outerjoin(Alarms, Alarms.nodeid == Node.nodeid).filter(Node.foreignid.in_([\'foreignid_1\',\'foreignid_3\',\'foreignid_2\'])).order_by(asc(Node.nodeid))\n\nIn [87]: results = stmt.all()\n---------------------------------------------------------------------------\nInternalError                             Traceback (most recent call last)\n&lt;ipython-input-87-1110c354b407&gt; in &lt;module&gt;()\n----&gt; 1 results = stmt.all()\n\n/usr/local/lib/python2.6/dist-packages/SQLAlchemy-0.7.8-py2.6-linux-x86_64.egg/sqlalchemy/orm/query.pyc in all(self)\n   2113\n   2114         """"""\n-&gt; 2115         return list(self)\n   2116\n   2117     @_generative(_no_clauseelement_condition)\n\n/usr/local/lib/python2.6/dist-packages/SQLAlchemy-0.7.8-py2.6-linux-x86_64.egg/sqlalchemy/orm/query.pyc in __iter__(self)\n   2225         if self._autoflush and not self._populate_existing:\n   2226             self.session._autoflush()\n-&gt; 2227         return self._execute_and_instances(context)\n   2228\n   2229     def _connection_from_session(self, **kw):\n\n/usr/local/lib/python2.6/dist-packages/SQLAlchemy-0.7.8-py2.6-linux-x86_64.egg/sqlalchemy/orm/query.pyc in _execute_and_instances(self, querycontext)\n   2240                         close_with_result=True)\n   2241\n-&gt; 2242         result = conn.execute(querycontext.statement, self._params)\n   2243         return self.instances(result, querycontext)\n   2244\n\n/usr/local/lib/python2.6/dist-packages/SQLAlchemy-0.7.8-py2.6-linux-x86_64.egg/sqlalchemy/engine/base.pyc in execute(self, object, *multiparams, **params)\n   1447                                                 object,\n   1448                                                 multiparams,\n-&gt; 1449                                                 params)\n   1450         else:\n   1451             raise exc.InvalidRequestError(\n\n/usr/local/lib/python2.6/dist-packages/SQLAlchemy-0.7.8-py2.6-linux-x86_64.egg/sqlalchemy/engine/base.pyc in _execute_clauseelement(self, elem, multiparams, params)\n   1582             compiled_sql,\n   1583             distilled_params,\n-&gt; 1584             compiled_sql, distilled_params\n   1585         )\n   1586         if self._has_events:\n\n/usr/local/lib/python2.6/dist-packages/SQLAlchemy-0.7.8-py2.6-linux-x86_64.egg/sqlalchemy/engine/base.pyc in _execute_context(self, dialect, constructor, statement, parameters, *args)\n   1696                                 parameters,\n   1697                                 cursor,\n-&gt; 1698                                 context)\n   1699             raise\n   1700\n\n/usr/local/lib/python2.6/dist-packages/SQLAlchemy-0.7.8-py2.6-linux-x86_64.egg/sqlalchemy/engine/base.pyc in _execute_context(self, dialect, constructor, statement, parameters, *args)\n   1689                                     statement,\n   1690                                     parameters,\n-&gt; 1691                                     context)\n   1692         except Exception, e:\n   1693             self._handle_dbapi_exception(\n\n/usr/local/lib/python2.6/dist-packages/SQLAlchemy-0.7.8-py2.6-linux-x86_64.egg/sqlalchemy/engine/default.pyc in do_execute(self, cursor, statement, parameters, context)\n    329\n    330     def do_execute(self, cursor, statement, parameters, context=None):\n--&gt; 331         cursor.execute(statement, parameters)\n    332\n    333     def do_execute_no_params(self, cursor, statement, context=None):\n\nInternalError: (InternalError) current transaction is aborted, commands ignored until end of transaction block\n \'SELECT node.nodeid AS node_nodeid, node.dpname AS node_dpname, node.nodecreatetime AS node_nodecreatetime, node.nodeparentid AS node_nodeparentid, node.nodetype AS node_nodetype, node.nodesysoid AS node_nodesysoid, node.nodesysname AS node_nodesysname, node.nodesysdescription AS node_nodesysdescription, node.nodesyslocation AS node_nodesyslocation, node.nodesyscontact AS node_nodesyscontact, node.nodelabel AS node_nodelabel, node.nodelabelsource AS node_nodelabelsource, node.nodenetbiosname AS node_nodenetbiosname, node.nodedomainname AS node_nodedomainname, node.operatingsystem AS node_operatingsystem, node.lastcapsdpoll AS node_lastcapsdpoll, node.foreignsource AS node_foreignsource, node.foreignid AS node_foreignid, alarms.alarmid AS alarms_alarmid, alarms.eventuei AS alarms_eventuei, alarms.dpname AS alarms_dpname, alarms.nodeid AS alarms_nodeid, alarms.ipaddr AS alarms_ipaddr, alarms.serviceid AS alarms_serviceid, alarms.reductionkey AS alarms_reductionkey, alarms.alarmtype AS alarms_alarmtype, alarms.counter AS alarms_counter, alarms.severity AS alarms_severity, alarms.lasteventid AS alarms_lasteventid, alarms.firsteventtime AS alarms_firsteventtime, alarms.lasteventtime AS alarms_lasteventtime, alarms.firstautomationtime AS alarms_firstautomationtime, alarms.lastautomationtime AS alarms_lastautomationtime, alarms.description AS alarms_description, alarms.logmsg AS alarms_logmsg, alarms.operinstruct AS alarms_operinstruct, alarms.tticketid AS alarms_tticketid, alarms.tticketstate AS alarms_tticketstate, alarms.mouseovertext AS alarms_mouseovertext, alarms.suppresseduntil AS alarms_suppresseduntil, alarms.suppresseduser AS alarms_suppresseduser, alarms.suppressedtime AS alarms_suppressedtime, alarms.alarmackuser AS alarms_alarmackuser, alarms.alarmacktime AS alarms_alarmacktime, alarms.managedobjectinstance AS alarms_managedobjectinstance, alarms.managedobjecttype AS alarms_managedobjecttype, alarms.applicationdn AS alarms_applicationdn, alarms.ossprimarykey AS alarms_ossprimarykey, alarms.x733alarmtype AS alarms_x733alarmtype, alarms.x733probablecause AS alarms_x733probablecause, alarms.qosalarmstate AS alarms_qosalarmstate, alarms.clearkey AS alarms_clearkey, alarms.ifindex AS alarms_ifindex, alarms.eventparms AS alarms_eventparms \\nFROM node LEFT OUTER JOIN alarms ON alarms.nodeid = node.nodeid \\nWHERE node.foreignid IN (%(foreignid_1)s, %(foreignid_2)s, %(foreignid_3)s) ORDER BY node.nodeid ASC\' {\'foreignid_1\': \'foreignid_1\', \'foreignid_3\': \'foreignid_3\', \'foreignid_2\': \'foreignid_2\'}\n']",True
1699150,"In SQLAlchemy, how do I specify a full-text index?","class AccountIndexes(Base): __tablename__ = 'account_indexes' id = Column(Integer, primary_key = True) user_id = Column(Integer, nullable=False, unique=True, index=True) full_name = Column(String(255), nullable=True) __table_args__ = {'mysql_engine':'MyISAM'} That's my table. How do I make a ""full text index"" on full_name? (not a normal index)",[],True
1781801,Dynamic Python RPC,"TLDR: Dynamic RPC mechanisms in Python? I am working on a Python project using SQLAlchemy and Alembic that is then wrapped in Protocol Buffers for CLI interaction. The tool's selling point (at least for me) is to allow the modification of the underlying DB schema by the client on the fly. Basically, if the user would like to add a field to the POPO the library would take care of interacting with the server (and the underlying DB) to add the field. I'm thinking of using Protocol Buffers for it's efficiency but it like many other RPC mechanisms it requires a compilation phase into it's underlying IDL. I'm just curious if anyone has any ideas as to how to get something like this ""dynamic"". I've looked briefly at other RPC mechanisms but all of them have the same issue of being static in terms of the objects and fields they represent. I guess I could shell out on the server level and recompile the ProtBuf IDL on each change but I thought I would ask the interwebs if perhaps there is a better way that I simply haven't found or thought of to make RPC more dynamic in Python. Thanks in advance if you have any thoughts.",[],True
1853611,SQLAlchemy: select over multiple tables,"I wanted to optimize my database query: and tried to merge those two selects in one query: the database-schema looks like: There are several links (donator) in request_table pointing to one link in the link_table. I want to have links from link_table, which are not yet ""requested"". But this does not work. Is it actually possible, what I'm trying to do? If so, how would you do that? Thank you very much in advance!","['link_list = select(\n    columns=[link_table.c.rating, link_table.c.url, link_table.c.donations_in],\n    whereclause=and_(\n        not_(link_table.c.id.in_(\n            select(\n                columns=[request_table.c.recipient],\n                whereclause=request_table.c.donator==donator.id\n            ).as_scalar()\n        )),\n        link_table.c.id!=donator.id,\n    ),\n    limit=20,\n).execute().fetchall()\n', 'link_list = select(\n    columns=[link_table.c.rating, link_table.c.url, link_table.c.donations_in],\n    whereclause=and_(\n        link_table.c.active==True,\n        link_table.c.id!=donator.id,\n        request_table.c.donator==donator.id,\n        link_table.c.id!=request_table.c.recipient,\n    ),\n    limit=20,\n    order_by=[link_table.c.rating.desc()]\n).execute().fetchall()\n', ""link_table = Table('links', metadata,\n    Column('id', Integer, primary_key=True, autoincrement=True),\n    Column('url', Unicode(250), index=True, unique=True),\n    Column('registration_date', DateTime),\n    Column('donations_in', Integer),\n    Column('active', Boolean),\n)\nrequest_table = Table('requests', metadata,\n    Column('id', Integer, primary_key=True, autoincrement=True),\n    Column('recipient', Integer, ForeignKey('links.id')),\n    Column('donator', Integer, ForeignKey('links.id')),\n    Column('date', DateTime),\n)\n""]",True
1856345,Cross database join in sqlalchemy,"Is there a way in SQLAlchemy to do cross-database joins. To be specific, here is my use case: Schema db1.entity1 entity1_id: Primary Key entity2_id: Foreign Key to db2.entity2.entity2_id db2.entity2 entity2_id: Primary Key Model I'm using declarative style for models. Now, as expected, my queries for Entity1 is failing with MySQL error messages saying table entity2 not found. I tried many different combination for with no success. So i was wondering if it is possible in SQLAlchemy.","[""class Entity1(Base):\n  __tablename__ = 'entity1' ## I tried combination of &lt;db&gt;.&lt;table&gt; with no success\n  entity1_id = Column(Integer, primary_key=True)\n  entity2_id = Column(Integer, ForeignKey('db2.entity2.entity2_id'))\n  entity2 = relationship('Entity2')\n\nclass Entity2(Base):\n  __tablename__ = 'entity2' ## I tried combination of &lt;db&gt;.&lt;table&gt; with no success\n  entity2_id = Column(Integer, primary_key=True)\n"", '__tablename__']",True
1931859,How to create a non-persistent Elixir/SQLAlchemy object?,"because of legacy data which is not available in the database but some external files, I want to create a SQLAlchemy object which contains data read from the external files, but isn't written to the database if I execute session.flush() My code looks like this: Everything works fine except that on a session.flush() executed later in the application SQLAlchemy tries to write the created Phone object to the database (which fortunatly doesn't succeed, because phone.state is longer than the data type allows), which breaks the function which issues the flush. Is there any way to prevent SQLAlchemy from trying to write such an object? Ciao, Steffen Update While I didn't find anything on in the elixir documentation (maybe you can provide a link?), it seemed to me worth a try (I would have preferred a way to prevent a single instance from being written instead of the whole entity). At first it seemed that the statement has no effect and I suspected my SQLAlchemy/Elixir versions to be too old, but then I found out that the connection to the PurchaseOrderPosition entity (which I didn't modify) made with causes the phone object to be written again. If I remove the statement, everything seems to be fine. Thanks for the help!","['try:\n  return session.query(Phone).populate_existing().filter(Phone.mac == ident).one()\nexcept:\n  return self.createMockPhoneFromLicenseFile(ident)\n\ndef createMockPhoneFromLicenseFile(self, ident):\n  # Some code to read necessary data from file deleted....\n  phone = Phone()\n  phone.mac = foo\n  phone.data = bar\n  phone.state = ""Read from legacy file""\n  phone.purchaseOrderPosition = self.getLegacyOrder(ident)\n  # SQLAlchemy magic doesn\'t seem to work here, probably because we don\'t insert the created\n  # phone object into the database. So we set the id fields manually.\n  phone.order_id = phone.purchaseOrderPosition.order_id\n  phone.order_position_id = phone.purchaseOrderPosition.order_position_id\n  return phone \n', 'using_mapper_options(save_on_init=False)\n', 'phone.purchaseOrderPosition = self.getLegacyOrder(ident) \n']",True
1949660,Encoding error with sqlalchemy,"I'm using pyramid for a web application with a postgres database, wtforms, sqlalchemy and jinja2 and I'm having this error when the application try to get the issues types from database to fill a select field with wtforms: this is the issue types table into model.py: Into bd I have this: this is the part where the error occurs this is the Traceback I try this, but it did not work ascii as default encoding in python and I try something like this, but it did not work gae python ascii codec cant decode byte","[""Error: 'ascii' codec can't decode byte 0xc3 in position 5: ordinal not in range(128)\n"", 'class Mixin(object):\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    created = Column(DateTime())\n    modified = Column(DateTime())\n\n    __table_args__ = {\n        \'mysql_engine\': \'InnoDB\',\n        \'mysql_charset\': \'utf8\'\n    }\n    __mapper_args__ = {\'extension\': BaseExtension()}\n\nclass IssueType(Mixin, Base):\n    __tablename__ = ""ma_issue_types""\n    name = Column(Unicode(40), nullable=False)\n\n    def __init__(self, name):\n        self.name = name\n', '# select name from ma_issue_types where id = 3;\nname    \n------------\nTel\xc3\xa9fono\n', '# -*- coding: utf-8 -*-\n\nfrom issuemall.models import DBSession, IssueType\n\n\nclass IssueTypeDao(object):\n\n    def getAll(self):\n        dbsession = DBSession()\n        return dbsession.query(IssueType).all() #HERE THROWS THE ERROR\n', 'Traceback (most recent call last):\n  File ""/issueMall/issuemall/controller/issueRegisterController.py"", line 16, in issue_register\n    form = IssueRegisterForm(request.POST)\n  File ""/env/lib/python2.7/site-packages/wtforms/form.py"", line 178, in __call__\n    return type.__call__(cls, *args, **kwargs)\n  File ""/env/lib/python2.7/site-packages/wtforms/form.py"", line 224, in __init__\n    super(Form, self).__init__(self._unbound_fields, prefix=prefix)\n  File ""/env/lib/python2.7/site-packages/wtforms/form.py"", line 39, in __init__\n    field = unbound_field.bind(form=self, name=name, prefix=prefix, translations=translations)\n  File ""/env/lib/python2.7/site-packages/wtforms/fields/core.py"", line 301, in bind\n    return self.field_class(_form=form, _prefix=prefix, _name=name, _translations=translations, *self.args, **dict(self.kwargs, **kwargs))\n  File ""/issueMall/issuemall/form/generalForm.py"", line 11, in __init__\n    types = issueTypeDao.getAll()\n  File ""/issueMall/issuemall/dao/master/issueTypeDao.py"", line 11, in getAll\n    return self.__dbsession.query(IssueType).all()\n  File ""build/bdist.linux-x86_64/egg/sqlalchemy/orm/query.py"", line 2115, in all\n    return list(self)\n  File ""build/bdist.linux-x86_64/egg/sqlalchemy/orm/query.py"", line 2341, in instances\n    fetch = cursor.fetchall()\n  File ""build/bdist.linux-x86_64/egg/sqlalchemy/engine/base.py"", line 3205, in fetchall\n    l = self.process_rows(self._fetchall_impl())\n  File ""build/bdist.linux-x86_64/egg/sqlalchemy/engine/base.py"", line 3172, in _fetchall_impl\n    return self.cursor.fetchall()\nUnicodeDecodeError: \'ascii\' codec can\'t decode byte 0xc3 in position 5: ordinal not in range(128)\n', ""return dbsession.query(IssueType.id, IssueType.name.encode('utf-8')).all() #or decode('utf-8')\n""]",True
2527398,Why does this SQLAlchemy query returning illogical values that was not requested?,"posts_query = (db.session.query(Post). join(PostOption,PostOption.post_id == post_obj.id). filter(and_(PostOption.key == ""name"", PostOption.val == 'a')). filter(Post.place_id == post_obj.place_id) ) print map(lambda x:get_post_values(x),posts_query.all()) returns","[""[{u'name': u'a'}, {u'name': u'a'}, {u'name': u'a'}, {u'name': u'a'}, {u'name': u'a'}, {u'name': u'a'}, {u'name': u'a'}, {u'name': u'a'}, {u'name': u'a'}, {u'name': u'a'}, {u'name': u'a'}, {u'name': u'a'}, {u'name': u'a'}, {u'name': u'a'}, {u'name': u'b'}, {u'name': u'b'}, {u'name': u'b'}, {u'name': u'b'}, {u'name': u'b'}, {u'name': u'b'}, {u'name': u'b'}, {u'name': u'b'}, {u'name': u'b'}, {u'name': u'b'}, {u'name': u'b'}, {u'name': u'b'}, {u'name': u'b'}]\n""]",True
2719750,How to increase connection timeout using sqlalchemy with sqlite in python,I am using sqlite (v2.6.0) as database backend and using sqlalchemy(v0.7.9) to operate it. Recently I got a error By searching stackoverflow a possible solution is to increase the timeout of a connection. Referece: OperationalError: database is locked But I don't know how to did that in sqlalchemy (since connection are actually controlled by it) Can someone give me a direction?,['OperationalError: (OperationalError) database is locked'],True
2845898,How to do this in one select query?,"I need to display a list of posts. For each post, I need to also show: How many people ""like"" the post. Three names of those who ""like"" the post (preferably friends of viewing user). If the viewing user ""likes"" the post, I'd like for him/her to be one of the three. I don't know how to do it without querying for each item in a for loop, which is proving to be very slow. Sure caching/denormalization will help, but I'd like to know if this can be done otherwise. How does facebook do it? Assuming this basic db structure, any suggestions? As a side note, if anyone knows how to do this in SQLAlchemy, that would very much appreciated. EDIT: SQLFiddle http://sqlfiddle.com/#!2/9e703",['users\n-----\nid\nusername\n\nposts\n---------\nid\nuser_id\ncontent\n\nfriendships\n-----------\nuser_id\nfriend_id\nis_confirmed (bool)\n\nusers_liked_posts\n-----------------\nuser_id\npost_id\n'],True
2913433,"when using ""group_by"" in a query, select an element from each group","I was wondering how to extract an arbitrary element from a class when querying with ""group by"". For example: How would I create a query that outputs: Basic query would be: What if I wanted to return 1) the newest date of all rows in each group_by(Post.creator) or 2) if any of the rows had anonymous == True.","[""class Post(Base):\n    id = Column(Integer, primary_key=True)\n    created = Column(DateTime)\n    comments = Column(Integer)\n    creator = Column(Integer, ForeignKey('user.id'))\n    anonymous = Column(Boolean)\n\nclass User(Base):\n    id = Column(Integer, primary_key=True)\n"", ""creator | total number of comments made on the creator's post | the time of the creator's last post\n\ncreator | total number of comments made on the creator's post | if any of the posts are anonymous\n"", ""session = DBSession()\ncommsum = session.query(Post.creator, func.sum(Post.comments).label('totalcomments')).\\\n    group_by(Post.creator).subquery()\nreturn session.query(User, commsum.c.totalcomments).\\\n    join(commsum, commsum.c.creator == User.id).all()\n""]",True
2946069,Multiple self referential relationships in SQLAlchemy,"I have a database model where I need a one-to-many relationship and two one-to-one relationships. Here's the model i've made, but it's throwing errors I get the following error whenever i try to do anything to the database What's really weird is that it worked without the next and prev columns. Anybody know what's wrong?","['class Page(Base):\n    __tablename__ = \'pages\'\n    id          = Column(Integer, primary_key=True)\n    title       = Column(String(100), nullable=False)\n    content     = Column(Text, nullable=False)\n\n    parent_id   = Column(Integer, ForeignKey(""pages.id""), nullable=True)\n    children    = relationship(""Page"", backref=backref(""parent"", remote_side=id))\n\n    next_id     = Column(Integer, ForeignKey(""pages.id""), nullable=True)\n    next        = relationship(""Page"", backref=backref(""prev"", remote_side=id, uselist=False))\n\n    prev_id     = Column(Integer, ForeignKey(""pages.id""), nullable=True)\n    prev        = relationship(""Page"", backref=backref(""next"", remote_side=id, uselist=False))\n\n    def __init__(self, title, content, parent_id=None, next_id=None, prev_id=None):\n        self.title = title\n        self.content = content\n        self.parent_id = parent_id\n        self.next_id = next_id\n        self.prev_id = prev_id\n\n    def __repr__(self):\n        return \'&lt;Page ""%r""&gt;\' % self.title\n', ""ArgumentError: Could not determine join condition between parent/child tables on relationship Page.children. Specify a 'primaryjoin' expression. If 'secondary' is present, 'secondaryjoin' is needed as well.\n""]",True
3089712,Execute bulk insert with sqlalchemy and mysql,"I am creating dynamically a bulk insert query. In my application I use sqlAlchemy and I would like to execute that insert. The problem lies when I am creating the query. I want to insert data that contain special characters that should be escaped. Using MysqlDb module there is a function MySQLdb.escape_string that escapes the special characters but unfortunately does not work for Unicode characters. What are my options? I want to notice that it is not easy to create the query as so I can execute Session.execute(q, q_dict) . Is there a python function that accepts a string and escapes all characters that need escapting for Mysql? Imagine that I want to create write a file to disk and then execute it through mysql console.","['q = INSERT INTO table (a, b) VALUES (:a1, :b1), (:a2, :b2) \nq_dict = {(a1, b1), (a2, b2)}\n']",True
3099374,SQLAlchemy inheritance with relationship is None in instantiated object,"I would like to have a 'relationship' in an inherited (mixin) class. However, when I create the inherited object, the relationship object is None. I cannot append to it. How do I resolve this? Here is code based upon the documentation The output is: In general, I should be able to append to the relationship object (target), but here I cannot because it is None. Why?","['from sqlalchemy import Column, Integer, String, DateTime, Boolean, BigInteger, Float\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import relationship, backref\nfrom sqlalchemy.ext.declarative import declared_attr\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\nclass Target(Base):\n    __tablename__ = ""target""\n    id = Column(Integer, primary_key=True)\n\nclass RefTargetMixin(object):\n    @declared_attr\n    def target_id(cls):\n        return Column(\'target_id\', ForeignKey(\'target.id\'))\n\n    @declared_attr\n    def target(cls):\n        return relationship(""Target"",\n            primaryjoin=""Target.id==%s.target_id"" % cls.__name__\n        )\n\nclass Foo(RefTargetMixin, Base):\n    __tablename__ = \'foo\'\n    id = Column(Integer, primary_key=True)\n\nprint repr(RefTargetMixin.target)\nprint repr(Foo.target)\nprint repr(Foo().target)\n', '&lt;sqlalchemy.orm.properties.RelationshipProperty object at 0x24e7890&gt;\n&lt;sqlalchemy.orm.attributes.InstrumentedAttribute object at 0x24e7690&gt;\nNone\n']",True